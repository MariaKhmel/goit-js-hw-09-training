{"mappings":"AA4FA,MAAMA,EAAS,CACX,cACA,UACA,kBACA,aACA,cAGJ,IAAIC,EAAc,EAClB,MAAMC,EAAO,CACTC,SAAUC,SAASC,cAAc,kBACjCC,YAAaF,SAASC,cAAc,cACpCE,cAAeH,SAASC,cAAc,gBACtCG,UAAWJ,SAASC,cAAc,8BAqCtC,SAASI,EAAkBC,GACvBR,EAAKI,YAAYK,YAAcD,C,CAGnC,SAASE,EAAoBF,GACzBR,EAAKK,cAAcI,YAAcD,C,CAvCrCR,EAAKC,SAASU,iBAAiB,SAE/B,WACAZ,GAAe,EACX,MAAMa,EAAWd,EAAOe,KAAIC,IAAQC,OAmD3BC,EAnD+BF,EAoDjC,IAAIG,SAAQC,IACf,MAAMC,GAQSC,EARY,IAQPC,EARa,KAS9BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADxD,IAAuBA,EAAKC,EANpBI,YAAW,KACPP,EAAQ,C,MAAEF,E,KAAOG,GAAO,GACzBA,EAAK,IANhB,IAAaH,CAnDoC,IAC7CU,QAAQC,IAAIf,GAChBL,EAAkB,IAClBG,EAAoB,4CAKKkB,EAJThB,EAMZK,QAAQY,KAAKD,GAASE,MAAK,EAACd,MAAEA,EAAKG,KAAEA,MACjCZ,EAAkB,cAACS,qBAA4BG,iB,IAOvD,SAAoBS,GAChBX,QAAQc,IAAIH,GAASE,MAAME,IACvBA,EAAMC,SAAQ,EAACjB,MAACA,EAAKG,KAACA,OAkB9B,UAA4BH,MAAEA,EAAKG,KAAEA,EAAMe,YAAAC,IACvC,MAAMC,EAAK,WAAWD,aAAuBnB,aAAiBG,cAC9DnB,EAAKM,UAAU+B,mBAAmB,YAAaD,E,CAnBvCE,CAAmB,C,MAAEtB,E,KAAOG,E,YAAMpB,GAAc,IAGpDW,EAAoB,wCAAuE,G,CAnB/F6B,CAAW3B,GAGf,IAAyBgB,C","sources":["src/js/training.js"],"sourcesContent":["import '../css/common.css'\n\n\n/*\n * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞\n *  - –ö–ª–∞—Å—Å Promise\n *  - resolve\n *  - reject\n *  - Promise.prototype.then(onResolve, onReject)\n */\n\n// const promise = new Promise((resolve, reject) => {\n//     const canFulfill = Math.random() > 0.5;\n// console.log(canFulfill);\n//     setTimeout(() => {\n//         if (canFulfill) {\n//             resolve('–ü—Ä–æ–º–∏—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ, —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º (–∏—Å–ø–æ–ª–Ω–µ–Ω, fulfilled)');\n//         }\n\n//         reject('–ü—Ä–æ–º–∏—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–æ—Ç–∫–ª–æ–Ω—ë–Ω, rejected)');\n//     }, 1000);\n// });\n\n\n// promise.then(onFulfilled, onRejected);\n\n// function onFulfilled(result) {\n//     console.log('onFulfilled -> onFulfilled');\n//     console.log(`‚úÖ ${result}`);\n// }\n\n// function onRejected(error) {\n//     console.log('onRejected -> onRejected');\n//     console.log(`‚ùå ${error}`);\n// }\n\n\n\n/*\n * –¶–µ–ø–æ—á–∫–∏ –ø—Ä–æ–º–∏—Å–æ–≤ (chaining)\n * Promise.prototype.catch(error)\n * Promise.prototype.finally()\n */\n\n// promise\n//     .then(onFulfilled)\n//     .then(x => {\n//         console.log(`the value of x - ${x}`);\n\n//         return 10;\n//     })\n//     .then(y => {\n//         console.log(y);\n//     })\n//     .catch(error => console.log(error))\n//     .finally(() => console.log('–Ø –±—É–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ'));\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n/*\n * –ü—Ä–æ–º–∏—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:\n * - –ü–æ–±–ª–µ–º–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—Ä–æ–º–∏—Å–∞ —Å –∫–æ–ª–±–µ–∫–æ–º\n * - –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å\n */\n\n// const makeOrder = dish => {\n//   const DELAY = 5000;\n\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve(`‚úÖ –í–æ—Ç –≤–∞—à –∑–∞–∫–∞–∑: ${dish}`);\n//       }\n\n//       reject('‚ùå –£–ø—Å, —É –Ω–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø—Ä–æ–¥—É–∫—Ç—ã');\n//     }, DELAY);\n//   });\n// };\n\n// makeOrder('–ø–∏—Ä–æ–∂–æ–∫').then(onMakeOrderSuccess).catch(onMakeOrderError);\n\n// function onMakeOrderSuccess(result) {\n//   console.log('onMakeOrderSuccess');\n//   console.log(result);\n// }\n\n// function onMakeOrderError(error) {\n//   console.log('onMakeOrderError');\n//   console.log(error);\n// }\n\nconst horses = [\n    'Secretariat',\n    'Eclipse',\n    'West Australian',\n    'Flying Fox',\n    'Seabiscuit',\n];\n\nlet raceCounter = 0;\nconst refs = {\n    startBtn: document.querySelector('.js-start-race'),\n    winnerField: document.querySelector('.js-winner'),\n    progressField: document.querySelector('.js-progress'),\n    tableBody: document.querySelector('.js-results-table > tbody'),\n};\n\nrefs.startBtn.addEventListener('click', onStart);\n\nfunction onStart() {\nraceCounter += 1;\n    const promises = horses.map(item => run(item));\n    console.log(promises);\nupdateWinnerField('');\nupdateProgressField('ü§ñ –ó–∞–µ–∑–¥ –Ω–∞—á–∞–ª—Å—è, —Å—Ç–∞–≤–∫–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è!');\ndetermineWinner(promises);\n    waitForAll(promises);\n}\n\nfunction determineWinner(horsesP) {\n    \n    Promise.race(horsesP).then(({ horse, time }) => {\n        updateWinnerField(`üéâ –ü–æ–±–µ–¥–∏–ª ${horse}, —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤ –∑–∞ ${time}\n    –≤—Ä–µ–º–µ–Ω–∏`);\n        // updateResultsTable({ horse, time, raceCounter });\n    });\n}\n\n\nfunction waitForAll(horsesP) {\n    Promise.all(horsesP).then((horse) => {\n        horse.forEach(({horse,time}) => {\n            updateResultsTable({ horse, time, raceCounter });\n       })\n        // updateResultsTable({ horse, time, raceCounter });\n        updateProgressField('üìù –ó–∞–µ–∑–¥ –æ–∫–æ–Ω—á–µ–Ω, –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Å—Ç–∞–≤–∫–∏.');\n    });\n}\n\n\n\nfunction updateWinnerField(message) {\n    refs.winnerField.textContent = message;\n}\n\nfunction updateProgressField(message) {\n    refs.progressField.textContent = message;\n}\n\nfunction updateResultsTable({ horse, time, raceCounter }) {\n    const tr = `<tr><td>${raceCounter}</td><td>${horse}</td><td>${time}</td></tr>`;\n    refs.tableBody.insertAdjacentHTML('beforeend', tr);\n}\n\n/*\n * Promise.race([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤—ã–ø–æ–ª–Ω–∏–≤—à–µ–≥–æ—Å—è –ø—Ä–æ–º–∏—Å–∞\n */\n\n/*\n * Promise.all([]) –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤\n */\n\nfunction run(horse) {\n    return new Promise(resolve => {\n        const time = getRandomTime(2000, 3500);\n\n        setTimeout(() => {\n            resolve({ horse, time });\n        }, time);\n    });\n}\n\nfunction getRandomTime(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"],"names":["$6cf2965d6cf43c60$var$horses","$6cf2965d6cf43c60$var$raceCounter","$6cf2965d6cf43c60$var$refs","startBtn","document","querySelector","winnerField","progressField","tableBody","$6cf2965d6cf43c60$var$updateWinnerField","message","textContent","$6cf2965d6cf43c60$var$updateProgressField","addEventListener","promises","map","item","$6cf2965d6cf43c60$var$run","horse","Promise","resolve","time","min","max","Math","floor","random","setTimeout","console","log","horsesP","race","then","all","horse1","forEach","raceCounter","raceCounter1","tr","insertAdjacentHTML","$6cf2965d6cf43c60$var$updateResultsTable","$6cf2965d6cf43c60$var$waitForAll"],"version":3,"file":"training.dcd83cb1.js.map"}